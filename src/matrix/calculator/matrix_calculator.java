/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrix.calculator;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Muleya
 */
@SuppressWarnings("serial")
public class matrix_calculator extends javax.swing.JFrame {

    /**
     * Creates new form matrix_calculator
     */
    public matrix_calculator() {
        initComponents();
        setLocation((xx/4)+200, yy/12);
        File f=new File("chatsfly\\matrix_cal.png");

    ImageIcon ic=new ImageIcon(f.getPath());
     
   this.setIconImage(ic.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        procced = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        n_matrices = new javax.swing.JTextField();
        n_rows = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        container = new javax.swing.JDesktopPane();
        n_col = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setType(java.awt.Window.Type.POPUP);

        procced.setBackground(new java.awt.Color(51, 255, 51));
        procced.setText("Procced");
        procced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proccedActionPerformed(evt);
            }
        });

        jLabel1.setText("This app will help you to add or subtract any number of matrix in any dimension");

        jLabel2.setText("Remember you can only add or subtract marices of same columns and rows only");

        jLabel3.setText("Please enter number of matrixes");

        jLabel4.setText("Enter number of Rows and Columns ");

        n_matrices.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "number of matrices", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        n_rows.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "rows", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(container);

        n_col.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "columns", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(n_rows, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(n_col, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(n_matrices)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(procced, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(n_matrices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(n_col, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(n_rows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(procced)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(matrix_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(matrix_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(matrix_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(matrix_calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new matrix_calculator().setVisible(true);
        });
    }
    
    private void proccedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proccedActionPerformed
        int cols=0,n_matrix=0,rows=0;
        boolean go=true,error=true;
             if(!n_matrices.getText().isEmpty()){
                try{
                    n_matrix=Integer.parseInt(getN_matrices().getText());
                    if(n_matrix<2){
                       go=false;error=false;
                    
                        JOptionPane.showConfirmDialog(this,"Number of matrices must be more than 1", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                    
                    }
                }catch(NumberFormatException ee){
                      JOptionPane.showConfirmDialog(this,"You input for the number of matrices is invalid", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                }    
           }else{
               go=false;error=false;
                    
               JOptionPane.showConfirmDialog(this,"Number of matrices, field is empty", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                    
            }
            if(error){if(!n_rows.getText().isEmpty()){
                try{
                    rows=Integer.parseInt(getN_rows().getText());
                    if(rows<1){
                        go=false;error=false;
                    
                        JOptionPane.showConfirmDialog(this,"Number of rows must be more than 0", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                    }
                }catch(NumberFormatException ee){
                      JOptionPane.showConfirmDialog(this,"You input for the number of rows is invalid", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                }
            }else{
               go=false;error=false;
               JOptionPane.showConfirmDialog(this,"Number of rows field is empty", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                    
            }
            }
            if(error){if(!n_col.getText().isEmpty()){
                   try {
                       cols=Integer.parseInt(n_col.getText());
                       if(cols<1){
                          go=false;error=false;
                        JOptionPane.showConfirmDialog(this,"Number of columns must be more than 0", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                    
                       }
                   }catch(NumberFormatException ee){
                      JOptionPane.showConfirmDialog(this,"You input for the number of columns is invalid", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                   }     
             }
            else{
               go=false;error=false;
               JOptionPane.showConfirmDialog(this,"Number of columns field is empty", "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
                    
            }
            }
            
                
                
    
                
                
                   if(go){
                       if( isRe_proceed()==false){
                        input(rows,cols,n_matrix);
                    }else{
                         int a=JOptionPane.showConfirmDialog(this,"Are you sure, you want to re_enter values", "Question",YES_NO_OPTION,QUESTION_MESSAGE);
                         if(a==YES_OPTION){
                            getContaine().removeAll();
                            getContaine().repaint();
                            getContaine().validate();
                        this.validate();
                        this.repaint();
                        input(rows,cols,n_matrix);
                                                }
                    }
                   }
        this.validate();
        this.repaint();
    }//GEN-LAST:event_proccedActionPerformed
 private void calculateActionPerformed(java.awt.event.ActionEvent evt,JTextField records[][][],int matrices,int rows,int cols) { 
    Double answers[][][]=new Double[matrices][rows][cols];boolean one_is_empty=false,error=false;
    int ii=0;
    String nnn="";
    
    for(int i=0;i<matrices;i++){
        for(int j=0;j<rows;j++){
            for(int k=0;k<cols;k++){
            
                    if(!records[i][j][k].getText().isEmpty()){
                        
                        try{
                            answers[i][j][k]=Double.parseDouble(records[i][j][k].getText());
                        }catch(NumberFormatException e){
                       error=true;
                       nnn=nnn+"\nThe input in \"row "+(j+1)+" column "+(k+1)+"\" in matrix "+(i+1)+" is not a number";
                    
                    }
                     
                    }else{
                       one_is_empty=true;
                       answers[i][j][k]=0.0;
                       ii+=1;
                    
                    }
                
            }
        }
    }
    if( !error){
    } else {
        int a=JOptionPane.showConfirmDialog(this,nnn, "Error", OK_CANCEL_OPTION,ERROR_MESSAGE);
        }
    if(error==false&&one_is_empty==false){
        if( isRe_calculate()==false){
            calculate(answers,matrices,rows,cols);
        }else{
                getContaine().remove(getArea());
                getContaine().repaint();
                        getContaine().validate();
                        this.validate();
                        this.repaint();
                        
                         calculate(answers,matrices,rows,cols);
                       
            
        }
    }else{
        if(!error){
            int a=JOptionPane.showConfirmDialog(this,ii+" of inputs(s) are empty\nDo want to continue?", "Error",YES_NO_OPTION,QUESTION_MESSAGE);
            if(a==YES_OPTION){
               calculate(answers,matrices,rows,cols); 
            }
        }
       
    }
   
 }
    /**
     * @param args the command line arguments
     */
    
    @SuppressWarnings("unchecked")
      void input(int rows,int cols,int n_matices){
          setRe_proceed(true);
          setCell_layout(new GridLayout());
          getCell_layout().setColumns(cols);
          getCell_layout().setRows(rows);
          
         getCell_layout().setHgap(5);
         getCell_layout().setVgap(5);
          JTextField records[][][]=new JTextField[n_matices][rows][cols];
          JPanel[] areas=new JPanel[n_matices];
         setCalculate(new JButton("Calculate"));
        getCalculate().setBackground(getProcced().getBackground());
        setSigns(new JComboBox[n_matices]);
        setSign(new String[n_matices]);
        
         for(int i=0;i<n_matices;i++){
             areas[i]=new JPanel();
              areas[i].setBorder(javax.swing.BorderFactory.createTitledBorder("")); 
              areas[i].setLayout(getCell_layout());
        
             areas[i].setSize(cols*70,rows*50);
             areas[0].setLocation(10,20);
             if(i>0){
                 areas[i].setLocation(areas[i-1].getWidth()+areas[i-1].getX()+60,20);
                 getSigns()[i]=new JComboBox();
                getSigns()[i].addItem(getPlus());
                getSigns()[i].addItem(getMinus());
                getSign()[i]="+";
           
                getContaine().add(getSigns()[i]);
           int a=i;
                getSigns()[i].addItemListener((ItemEvent ie) -> {
               if (ie.getItem() == getPlus()) {
                        getSigns()[a].setSelectedItem(ie.getItem());
                        getSign()[a]="+";
               } else {
                        getSigns()[a].setSelectedItem(ie.getItem());
                        getSign()[a]="-";
               }
             });
                 getSigns()[i].setBounds(areas[i-1].getX()+areas[i-1].getWidth()+5,((areas[i].getY()+areas[i].getHeight())-(areas[i].getHeight()/2))-5, 50, 20);
             }
             
             for(int j=0;j<rows;j++){
             for(int k=0;k<cols;k++){
             records[i][j][k]=new JTextField();
             do_actions(records[i][j][k]);
             areas[i].add(records[i][j][k]);
           }
          }
       
            getContaine().add(areas[i]);
         }
          getCalculate().setBounds(10, areas[n_matices-1].getY()+areas[n_matices-1].getHeight()+10,100, 25);
         getCalculate().addActionListener((java.awt.event.ActionEvent evt) -> {
             calculateActionPerformed(evt,records,n_matices,rows,cols);
          });
         getContaine().setPreferredSize(new Dimension(areas[n_matices-1].getX()+areas[n_matices-1].getWidth()+30,getCalculate().getY()+getCalculate().getHeight()));
         getContaine().add(getCalculate());
         getContaine().repaint();
         this.validate();
         this.repaint();
      }
      
      
      
      
      
 void  calculate(Double records[][][],int matrices,int rows,int cols){
        setRe_calculate(true);
          JTextField answer[][]=new JTextField[rows][cols];
          setArea(new JPanel());
          getArea().setBorder(javax.swing.BorderFactory.createTitledBorder("")); 
              getArea().setLayout(getCell_layout());
           getArea().setSize(cols*70,rows*50);
     for(int i=0;i<matrices;i++){
        for(int j=0;j<rows;j++){
            for(int k=0;k<cols;k++){
               try{
                   if(i==0){
                   answer[j][k]=new JTextField();
                   answer[j][k].setText(String.valueOf(0));
                   
                       answer[j][k].setText(String.valueOf(Double.parseDouble(answer[j][k].getText())+records[i][j][k]));
                   
                   do_actions(answer[j][k]);
               }else{
                   
                    if( getSigns()[i].getSelectedItem().equals("+")){
                        answer[j][k].setText(String.valueOf(Double.parseDouble(answer[j][k].getText())+records[i][j][k]));
                    }else{
                        answer[j][k].setText(String.valueOf(Double.parseDouble(answer[j][k].getText())-records[i][j][k]));
                    }
               }
               } catch(NullPointerException ie){
                       
                   }
                    getArea().add(answer[j][k]);
            }
        }
    }
        getArea().setLocation(20, getCalculate().getY()+getCalculate().getHeight()+6);
        getContaine().setPreferredSize(new Dimension(getContaine().getPreferredSize().width,getArea().getY()+getArea().getHeight()+20));
        getContaine().add(getArea());
          getContaine().repaint();
         this.validate();
         this.repaint();
      }
     JButton calculate;
     GridLayout cell_layout;
     boolean re_proceed=false,re_calculate=false;
     JPanel area;
    JComboBox signs[];
    String sign[];
    String plus="+";
    String minus="-";
    Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();
int xx = screen_size.width;
int yy = screen_size.height;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField n_col;
    private javax.swing.JTextField n_matrices;
    private javax.swing.JTextField n_rows;
    private javax.swing.JButton procced;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the calculate
     */
    public JButton getCalculate() {
        return calculate;
    }

    /**
     * @param calculate the calculate to set
     */
    public void setCalculate(JButton calculate) {
        this.calculate = calculate;
    }

    /**
     * @return the cell_layout
     */
    public GridLayout getCell_layout() {
        return cell_layout;
    }

    /**
     * @param cell_layout the cell_layout to set
     */
    public void setCell_layout(GridLayout cell_layout) {
        this.cell_layout = cell_layout;
    }

    /**
     * @return the re_proceed
     */
    public boolean isRe_proceed() {
        return re_proceed;
    }

    /**
     * @param re_proceed the re_proceed to set
     */
    public void setRe_proceed(boolean re_proceed) {
        this.re_proceed = re_proceed;
    }

    /**
     * @return the re_calculate
     */
    public boolean isRe_calculate() {
        return re_calculate;
    }

    /**
     * @param re_calculate the re_calculate to set
     */
    public void setRe_calculate(boolean re_calculate) {
        this.re_calculate = re_calculate;
    }

    /**
     * @return the area
     */
    public JPanel getArea() {
        return area;
    }

    /**
     * @param area the area to set
     */
    public void setArea(JPanel area) {
        this.area = area;
    }

    /**
     * @return the signs
     */
    public JComboBox[] getSigns() {
        return signs;
    }

    /**
     * @param signs the signs to set
     */
    public void setSigns(JComboBox[] signs) {
        this.signs = signs;
    }

    /**
     * @return the sign
     */
    public String[] getSign() {
        return sign;
    }

    /**
     * @param sign the sign to set
     */
    public void setSign(String[] sign) {
        this.sign = sign;
    }

    /**
     * @return the plus
     */
    public String getPlus() {
        return plus;
    }

    /**
     * @param plus the plus to set
     */
    public void setPlus(String plus) {
        this.plus = plus;
    }

    /**
     * @return the minus
     */
    public String getMinus() {
        return minus;
    }

    /**
     * @param minus the minus to set
     */
    public void setMinus(String minus) {
        this.minus = minus;
    }

    /**
     * @return the screen_size
     */
    public Dimension getScreen_size() {
        return screen_size;
    }

    /**
     * @param screen_size the screen_size to set
     */
    public void setScreen_size(Dimension screen_size) {
        this.screen_size = screen_size;
    }

    /**
     * @return the xx
     */
    public int getXx() {
        return xx;
    }

    /**
     * @param xx the xx to set
     */
    public void setXx(int xx) {
        this.xx = xx;
    }

    /**
     * @return the yy
     */
    public int getYy() {
        return yy;
    }

    /**
     * @param yy the yy to set
     */
    public void setYy(int yy) {
        this.yy = yy;
    }

    /**
     * @return the container
     */
    public javax.swing.JDesktopPane getContaine() {
        return container;
    }

    /**
     * @param container the container to set
     */
    public void setContaine(javax.swing.JDesktopPane container) {
        this.container = container;
    }

    /**
     * @return the jLabel1
     */
    public javax.swing.JLabel getjLabel1() {
        return jLabel1;
    }

    /**
     * @param jLabel1 the jLabel1 to set
     */
    public void setjLabel1(javax.swing.JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    /**
     * @return the jLabel2
     */
    public javax.swing.JLabel getjLabel2() {
        return jLabel2;
    }

    /**
     * @param jLabel2 the jLabel2 to set
     */
    public void setjLabel2(javax.swing.JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    /**
     * @return the jLabel3
     */
    public javax.swing.JLabel getjLabel3() {
        return jLabel3;
    }

    /**
     * @param jLabel3 the jLabel3 to set
     */
    public void setjLabel3(javax.swing.JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    /**
     * @return the jLabel4
     */
    public javax.swing.JLabel getjLabel4() {
        return jLabel4;
    }

    /**
     * @param jLabel4 the jLabel4 to set
     */
    public void setjLabel4(javax.swing.JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    /**
     * @return the jScrollPane1
     */
    public javax.swing.JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    /**
     * @param jScrollPane1 the jScrollPane1 to set
     */
    public void setjScrollPane1(javax.swing.JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    /**
     * @return the n_cols
     */
    
    /**
     * @param n_cols the n_cols to set
     */
    public void setN_cols(javax.swing.JTextField n_cols) {
        this.n_col = n_cols;
    }

    /**
     * @return the n_matrices
     */
    public javax.swing.JTextField getN_matrices() {
        return n_matrices;
    }

    /**
     * @param n_matrices the n_matrices to set
     */
    public void setN_matrices(javax.swing.JTextField n_matrices) {
        this.n_matrices = n_matrices;
    }

    /**
     * @return the n_rows
     */
    public javax.swing.JTextField getN_rows() {
        return n_rows;
    }

    /**
     * @param n_rows the n_rows to set
     */
    public void setN_rows(javax.swing.JTextField n_rows) {
        this.n_rows = n_rows;
    }

    /**
     * @return the procced
     */
    public javax.swing.JButton getProcced() {
        return procced;
    }

    /**
     * @param procced the procced to set
     */
    public void setProcced(javax.swing.JButton procced) {
        this.procced = procced;
    }
    void do_actions(JTextField fld){
         JPopupMenu popup=new JPopupMenu();
         UndoManager undomanager=new UndoManager();
         fld.getDocument().addUndoableEditListener(undomanager);
         Action undoaction=new AbstractAction("Undo") {
             private static final long serialVersionUID = 1L;
             @Override
             public void actionPerformed(ActionEvent e) {
                 if(undomanager.canUndo()){
                     undomanager.undo();
                 }
             }
         };
          Action  copy=new AbstractAction("Copy") {
             private static final long serialVersionUID = 1L;
             @Override
             public void actionPerformed(ActionEvent e) {
                 fld.copy();
             }
         };
           Action paste=new AbstractAction("Paste") {
             private static final long serialVersionUID = 1L;
             @Override
             public void actionPerformed(ActionEvent e) {
                 fld.paste();
             }
         };
            Action cut=new AbstractAction("Cut") {
             private static final long serialVersionUID = 1L;
             @Override
             public void actionPerformed(ActionEvent e) {
                 fld.cut();
             }
         };
             Action select_all=new AbstractAction("Select All") {
             private static final long serialVersionUID = 1L;
             @Override
             public void actionPerformed(ActionEvent e) {
                   fld.selectAll();
             }
         };
             
             cut.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke("Control X"));
             copy.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke("Control C"));
             paste.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke("Control Y"));
             select_all.putValue(Action.ACCELERATOR_KEY,KeyStroke.getKeyStroke("Control A"));
             popup.add(undoaction);
             popup.addSeparator();
             popup.add(cut);
             popup.add(copy);
             popup.add(paste);
             popup.addSeparator();
             popup.add(select_all);
            fld.setComponentPopupMenu(popup);
            fld.setComponentPopupMenu(popup);
            
            
     } 
}
